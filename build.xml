<project name="VariabilitySpec" basedir=".">
	<property name="version">1.0.0</property>
	<property name="dir.src">src</property>
	<property name="dir.build">out</property>
	<property name="dir.build.production">${dir.build}/production/variabilitySpec</property>
	<property name="dir.build.artifacts">${dir.build}/artifacts/variabilitySpec</property>
	<property name="file.jar">${dir.build.artifacts}/variabilitySpec-${version}.jar</property>
	<property name="file.jar.final">${dir.build.artifacts}/variabilitySpec-${version}.final.jar</property>
	
	<path id="projectClasspath">
		<fileset dir="lib">
			<include name="ee.ut-log-pnml-utils.jar"/>
			<include name="eventstr-comparison.jar"/>
			<include name="guava-18.0.jar"/>
			<include name="jaxen-1.1.6.jar"/>
			<include name="jdom.jar"/>
			<include name="PetriNets.jar"/>
			<include name="pnapi-1.0.jar"/>
			<include name="umaBPDiff-1.0.jar"/>
			<include name="unfolding.jar"/>
		</fileset>
	</path>
	
	<target name="clean">
		<delete dir="${dir.build}"/>
	</target>
	
	
	<target name="init">
		<mkdir dir="${dir.build}"/>
		<mkdir dir="${dir.build.production}"/>
		<mkdir dir="${dir.build.artifacts}"/>
	</target>
	
	<target name="compile" depends="init">
		<echo>Compiling Java source</echo>
		
		<javac classpathref="projectClasspath"
			   srcdir="${dir.src}"
			   destdir="${dir.build.production}" />
	</target>
	
	<target name="unzip-jars">
		<patternset id="classes">
			<include name="**/*.class"/>
		</patternset>
		<unjar dest="${dir.build.production}">
			<patternset refid="classes" />
			<fileset dir="lib" includes="*.jar" excludes="proguard.jar"/>
		</unjar>
	</target>
	
	<target name="jar" depends="compile,unzip-jars">
		<echo>Making JAR file</echo>
		
		<jar basedir="${dir.build.production}"
			 file="${file.jar}">
			<manifest>
				<attribute name="Main-Class" value="nl.rug.ds.bpm.variability.specification.tool.VariabilitySpecGen"/>
			</manifest>
		</jar>
	</target>
	
	<target name="shrink" depends="jar">
		<taskdef resource="proguard/ant/task.properties"
				 classpath="lib/proguard.jar" />
		
		<proguard obfuscate="false" optimize="false">
			-injars ${file.jar}
			-outjars ${file.jar.final}
			
			-libraryjars ${java.home}/lib/rt.jar
			
			-dontoptimize
			-dontobfuscate
			
			<!-- Preserve all annotations. -->
			
			-keepattributes *Annotation*
			
			<!-- Preserve all public applications. -->
			
			-keepclasseswithmembers public class * {
			public static void main(java.lang.String[]);
			}
			
			<!-- Preserve all native method names and the names of their classes. -->
			
			-keepclasseswithmembernames class * {
			native &lt;methods&gt;;
			}
			
			<!-- Preserve the methods that are required in all enumeration classes. -->
			
			-keepclassmembers,allowoptimization enum * {
			public static **[] values();
			public static ** valueOf(java.lang.String);
			}
			
			<!-- Explicitly preserve all serialization members. The Serializable
				 interface is only a marker interface, so it wouldn't save them.
				 You can comment this out if your library doesn't use serialization.
				 If your code contains serializable classes that have to be backward
				 compatible, please refer to the manual. -->
			
			-keepclassmembers class * implements java.io.Serializable {
			static final long serialVersionUID;
			static final java.io.ObjectStreamField[] serialPersistentFields;
			private void writeObject(java.io.ObjectOutputStream);
			private void readObject(java.io.ObjectInputStream);
			java.lang.Object writeReplace();
			java.lang.Object readResolve();
			}
			
			<!-- Your application may contain more items that need to be preserved;
				 typically classes that are dynamically created using Class.forName -->
			
			-keep public class * extends org.jdom
			-keep public class * extends org.apache.xerces
			
			-ignorewarnings
		</proguard>
		<delete file="${file.jar}"/>
	</target>
</project>
